buildscript {
    repositories {
        maven{url { "${snapshotsRepositoryUrl}"}}
        mavenCentral()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

configurations.all {
    resolutionStrategy.cacheDynamicVersionsFor 1, 'seconds'
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 1, 'seconds'
}
configure(subprojects) { project ->
    apply from: file("${rootProject.rootDir}/gradle/shared.gradle")

    repositories {
        maven{url { "${snapshotsRepositoryUrl}"}}
        mavenCentral()
    }

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    group = 'com.dxe.squirrel'
    version = '1.0.0'

    configurations {
        // replaced with jcl-over-slf4j
        all*.exclude group: 'commons-logging', module: 'commons-logging'
        // replaced with log4j-over-slf4j
        all*.exclude group: 'log4j', module: 'log4j'
        // replaced
        // all*.exclude group: 'org.jboss.logging', module: 'jboss-logging'
        // replaced with custom
        // all*.exclude group: 'org.slf4j', module: 'slf4j-api'
    }

    eclipse.classpath {
        containers.remove 'org.eclipse.jdt.launching.JRE_CONTAINER'
        containers "org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-${javaVersion}"
    }
}

configure(subprojects.findAll { !it.name.endsWith('-sdk') }) {
    apply plugin: 'spring-boot'
    bootRepackage.enabled = false

    dependencies {

        compile 'org.springframework.boot:spring-boot-starter-aop'
        compile 'org.springframework.boot:spring-boot-starter-cache'
        compile 'org.springframework.boot:spring-boot-configuration-processor'
        compile 'org.springframework.boot:spring-boot-starter-web'

        compile "com.mysema.querydsl:querydsl-sql:${querydsl_version}"
        compile "com.mysema.querydsl:querydsl-codegen:${querydsl_version}"

        compile "com.google.guava:guava:${guava_version}"
        compile "org.apache.commons:commons-lang3:${commons_lang3_version}"
        compile "commons-codec:commons-codec:${commons_codec_version}"

        compile "commons-net:commons-net:${common_net_version}"

        compile "joda-time:joda-time:${joda_time_version}"

        compile "org.jasypt:jasypt:${jasypt_version}"

        compile "mysql:mysql-connector-java:${mysql_version}"

        compile "redis.clients:jedis:${jedis_version}"

        compile "com.alibaba:fastjson:${fastjson_version}"
        
        compile "mysql:mysql-connector-java:${mysql_version}"
         
        compile "org.springframework:spring-core:${org_springframework_version}"
        
        compile "commons-io:commons-io:${commons_io_version}"
        
        testCompile 'org.springframework.boot:spring-boot-starter-test'

    }
}
